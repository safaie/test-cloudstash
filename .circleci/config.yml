version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/python:3.8
  machine-executor:
    machine:
      image: ubuntu-2004:202010-01    

jobs:
  run_VT:
    executor: machine-executor
    steps:
      - checkout
      - run: 
          environment:
            DEPLOY_FILE: "cloudstash.csar"
            VT_DOCKER_NAME: "RadonVT"
            VT_DOCKER_IMAGE: "marklawimperial/verification-tool"
            VT_FILES_PATH: '{"path":"/tmp/main.cdl"}'
          name: Run VT  
          command: |
            echo "Pull the latest image of VT"
            docker pull ${VT_DOCKER_IMAGE}
            echo ""
            echo "Unzip the csar"
            unzip ${DEPLOY_FILE}
            echo ""
            echo "Move relevant files to temp folder."
            mkdir -p tmp/radon-vt && cp -r _definitions tmp/radon-vt/_definitions && cp radon-vt/main.cdl tmp/radon-vt
            echo ""
            echo "Run Verification Tool as Docker image and open port 5000"
            docker run --name ${VT_DOCKER_NAME} --rm -d -p 5000:5000 -v ${PWD}/tmp/radon-vt:/tmp ${VT_DOCKER_IMAGE}
            echo ""
            echo "Wait a few seconds for the container to spin up."
            sleep 5
            echo ""
            echo "Verify the model with the main.cdl restrictions. - Detect inconsistencies."
            curl -X POST -H "Content-type: application/json" http://localhost:5000/solve/ -d ${VT_FILES_PATH}
            echo ""
            echo "Correct the model to comply with the main.cdl restrictions. - Propose correction of inconsistencies."
            curl -X POST -H "Content-type: application/json" http://localhost:5000/correct/ -d ${VT_FILES_PATH}
            echo ""
            echo "Stop the container"
            docker stop ${VT_DOCKER_NAME}
            echo ""
      - persist_to_workspace:
          root: .
          paths:
            - .
  run_DPT:
    executor: machine-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          environment:
            DEPLOY_FILE: "cloudstash.csar"
            DPT_DOCKER_IMAGE: "radonconsortium/radon-dp"
            GITHUB_REPO: "safaie/test-cloudstash"
          name: Run DPT  
          command: |
            echo "Pull radonconsortium/radon-dp:latest image from Dockerhub"
            docker pull ${DPT_DOCKER_IMAGE}
            echo ""
            echo "Create temporary directory"
            mkdir -p tmp/radon-dp-volume
            echo ""
            echo "Download a suitable model"
            docker run -v ${PWD}/tmp/radon-dp-volume:/app ${DPT_DOCKER_IMAGE} radon-defect-predictor download-model tosca github ${GITHUB_REPO}
            echo ""
            echo "Move CSAR into tmp library. This is colocated with the fetched radondp_model.joblib"
            cp ${DEPLOY_FILE} tmp/radon-dp-volume
            echo ""
            echo "Run predict"
            docker run -v ${PWD}/tmp/radon-dp-volume:/app ${DPT_DOCKER_IMAGE} radon-defect-predictor predict tosca ${DEPLOY_FILE}
            echo ""
            echo "Results are available at:"
            cat tmp/radon-dp-volume/radondp_predictions.json
            echo ""
      - persist_to_workspace:
          root: .
          paths:
            - .
  run_CTT:
    executor: machine-executor
    steps:
      - attach_workspace:
          at: .
      - run: 
          environment:
            CTT_DOCKER_NAME: "RadonCTT"
            CTT_DOCKER_IMAGE: "radonconsortium/radon-ctt:latest"
            CTT_CONFIG_FILE_PATH: "radon-ctt-cli-testing/ctt_config.yaml"
            CTT_SERVER_URL: "http://localhost:18080/RadonCTT"
          name: Run CTT  
          command: |
            echo "Initialize an empty file & copy the SSH key"
            mkdir -p tmp && touch tmp/awsec2.pem && echo $PRQ_AWS_SSH_KEY > tmp/awsec2.pem
            echo "Pull the latest version of the CTT docker Image"
            docker pull ${CTT_DOCKER_IMAGE}
            echo ""
            echo "Run CTT server using docker"
            docker run -d --rm  --name ${CTT_DOCKER_NAME} -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e "CTT_FAAS_ENABLED=1" -e "OPERA_SSH_USER=ubuntu" -e "OPERA_SSH_IDENTITY_FILE=/tmp/aws-ec2" -p 18080:18080 -v ${PWD}/tmp/awsec2.pem:/tmp/aws-ec2 ${CTT_DOCKER_IMAGE}
            echo ""
            echo "Clone the radon-ctt-cli repo"
            git clone https://github.com/radon-h2020/radon-ctt-cli.git
            python3 -m venv .venv
            . .venv/bin/activate
            echo ""
            echo "install the requirements"
            pip install -r radon-ctt-cli/requirements.txt
            echo ""
            echo "running ctt_cli.py, execute the test and print the results"
            python radon-ctt-cli/ctt_cli.py -u ${CTT_SERVER_URL} -c ${CTT_CONFIG_FILE_PATH}
            echo ""
            echo "unzip /tmp/results.zip"
            unzip /tmp/results.zip
            echo ""
            echo "execute execution.json"
            cat execution.json
            echo ""
            echo "Stop docker container"
            docker stop ${CTT_DOCKER_NAME}
      - persist_to_workspace:
          root: .
          paths:
            - .
  fetch_blueprint_from_TL:
    executor: machine-executor
    steps:
      - attach_workspace:
          at: .
      - run: 
          environment:
            # Template Library credentials are stored in CircleCI
            # The reference name used to store a blueprint in Template Library.
            csar_reference: "thumbnail-generation"
            # The version used to store a blueprint in Template Library.
            csar_version: "1.0.0"
          name: Fetch blueprint from TL  
          command: |
            echo ${csar_reference}
            echo ${csar_version}
            echo ""
            # Authenticate yourself using the environment variables TEMPLATE_LIBRARY_USER & TEMPLATE_LIBRARY_PASS
            BEARER_TOKEN="$(curl -X POST https://template-library-radon.xlab.si/api/auth/login -H "accept: */*" -H "Content-Type: application/json" -d "{\"username\":\"$TEMPLATE_LIBRARY_USER\",\"password\":\"$TEMPLATE_LIBRARY_PASS\"}" | python3 -c "import sys, json; print(json.load(sys.stdin)['token'])")"
            # GET command to download the blueprint from Template Library. (Assuming that the user has access to the specified blueprint)
            curl -X GET https://template-library-radon.xlab.si/api/templates/$csar_reference/versions/$csar_version/files -H "accept: application/octet-stream" -H "Authorization: Bearer $BEARER_TOKEN" --output blueprint
      - persist_to_workspace:
          root: .
          paths:
            - .
  opera_deploy:
    executor: machine-executor
    steps:
      - attach_workspace:
          at: .
      - run: 
          environment:
            # The file previously downloaded from Template Library
            DEPLOY_FILE: "blueprint"
          name: Opera deploy  
          command: |
            echo "install the necessary dependencies as pip packages"
            pip3 install opera==0.6.2 --user
            PATH="$(python3 -m site --user-base)/bin:${PATH}"
            pip3 list
            echo ""
            echo "unwrap the csar and deploy the file."
            opera init ${DEPLOY_FILE}
            opera deploy
            echo ""
    
workflows:
  cloudstash:
    jobs:
      - run_VT
      - run_DPT:
          requires:
            - run_VT
      - run_CTT:
          requires:
            - run_DPT
      - fetch_blueprint_from_TL:
          requires:
            - run_CTT
      - opera_deploy:
          requires:
            - fetch_blueprint_from_TL
