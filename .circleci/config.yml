version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/python:3.8
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
  machine-executor:
    machine:
      image: ubuntu-2004:202010-01    

jobs:
#  install_dependencies:
#    executor: docker-executor
#    steps:
#      - run: echo "install any dependencies.."
#  run_VT:
#    executor: machine-executor
#    steps:
#      - checkout
#      - run: 
#          environment:
#            DEPLOY_FILE: "cloudstash.csar"
#            VT_DOCKER_NAME: "RadonVT"
#            VT_DOCKER_IMAGE: "marklawimperial/verification-tool"
#            VT_FILES_PATH: '{"path":"/tmp/main.cdl"}'
#          command: |
#            # Pull the latest image of VT
#            echo "Pull the latest image of VT"
#            docker pull ${VT_DOCKER_IMAGE}
#            echo ""
#            # Unzip the csar
#            echo "Unzip the csar"
#            unzip ${DEPLOY_FILE}
#            echo ""
#            # Move relevant files to temp folder.
#            echo "Move relevant files to temp folder."
#            mkdir -p tmp/radon-vt && cp -r _definitions tmp/radon-vt/_definitions && cp radon-vt/main.cdl tmp/radon-vt
#            echo ""
#            # Run Verification Tool as Docker image and open port 5000
#            echo "Run Verification Tool as Docker image and open port 5000"
#            docker run --name ${VT_DOCKER_NAME} --rm -d -p 5000:5000 -v ${PWD}/tmp/radon-vt:/tmp ${VT_DOCKER_IMAGE}
#            echo ""
#            # Wait some sec for the container to spin up.
#            echo "Wait some sec for the container to spin up."
#            sleep 5
#            echo ""
#            # Verify the model with the main.cdl restrictions. - Detect inconsistencies.
#            echo "Verify the model with the main.cdl restrictions. - Detect inconsistencies."
#            curl -X POST -H "Content-type: application/json" http://localhost:5000/solve/ -d ${VT_FILES_PATH}
#            echo ""
#            # Correct the model to comply with the main.cdl restrictions. - Propose correction of inconsistencies.
#            echo "Correct the model to comply with the main.cdl restrictions. - Propose correction of inconsistencies."
#            curl -X POST -H "Content-type: application/json" http://localhost:5000/correct/ -d ${VT_FILES_PATH}
#            echo ""
#            # Stop the container
#            echo "Stop the container"
#            docker stop ${VT_DOCKER_NAME}
#            echo ""
#  run_DPT:
#    executor: machine-executor
#    steps:
#      - checkout
#      - run:
#          environment:
#            DEPLOY_FILE: "cloudstash.csar"
#            DPT_DOCKER_IMAGE: "radonconsortium/radon-dp"
#            GITHUB_REPO: "safaie/test-cloudstash"
#          command: |
#            # Pull radonconsortium/radon-dp:latest image from Dockerhub
#            echo "Pull radonconsortium/radon-dp:latest image from Dockerhub"
#            docker pull ${DPT_DOCKER_IMAGE}
#            echo ""
#            # Create temporary directory
#            echo "Create temporary directory"
#            mkdir -p tmp/radon-dp-volume
#            echo ""
#            # Download a suitable model
#            echo "Download a suitable model"
#            docker run -v ${PWD}/tmp/radon-dp-volume:/app ${DPT_DOCKER_IMAGE} radon-defect-predictor download-model tosca github ${GITHUB_REPO}
#            echo ""
#            # Move CSAR into tmp library. This is colocated with the fetched radondp_model.joblib
#            echo "Move CSAR into tmp library. This is colocated with the fetched radondp_model.joblib"
#            cp ${DEPLOY_FILE} tmp/radon-dp-volume
#            echo ""
#            # Run predict
#            echo "Run predict"
#            docker run -v ${PWD}/tmp/radon-dp-volume:/app ${DPT_DOCKER_IMAGE} radon-defect-predictor predict tosca ${DEPLOY_FILE}
#            echo ""
#            # Results are available at:
#            echo "Results are available at:"
#            cat tmp/radon-dp-volume/radondp_predictions.json
#            echo ""
#  run_CTT:
#    executor: machine-executor
#    steps:
#      - checkout
#      - run: 
#          environment:
#            CTT_DOCKER_NAME: "RadonCTT"
#            CTT_DOCKER_IMAGE: "radonconsortium/radon-ctt:latest"
#            CTT_CONFIG_FILE_PATH: "radon-ctt-cli-testing/ctt_config.yaml"
#            CTT_SERVER_URL: "http://localhost:18080/RadonCTT"
#          command: |
#            echo "run CTT"
  fetch_blueprint_from_TL:
    executor: machine-executor
    steps:
      - checkout
      - run: 
          environment:
            csar_reference: "thumbnail-generation"
            csar_version: "1.0.0"
          command: |
            echo ${csar_reference}
            echo ${csar_version}
            BEARER_TOKEN="$(curl -X POST https://template-library-radon.xlab.si/api/auth/login -H "accept: */*" -H "Content-Type: application/json" -d "{\"username\":\"$TEMPLATE_LIBRARY_USER\",\"password\":\"$TEMPLATE_LIBRARY_PASS\"}" | python3 -c "import sys, json; print(json.load(sys.stdin)['token'])")"
            curl -X GET https://template-library-radon.xlab.si/api/templates/$csar_reference/versions/$csar_version/files -H "accept: application/octet-stream" -H "Authorization: Bearer $BEARER_TOKEN" --output blueprint
  opera_deploy:
    executor: docker-executor
    steps:
      - run: echo "opera deploy"
  cleanup:
    executor: docker-executor
    steps:
      - run: 
          command: echo "cleaning up the workspace"
          when: always
    
workflows:
  cloudstash:
    jobs:
#      - install_dependencies
#      - run_VT:
#          requires:
#            - install_dependencies
#      - run_DPT:
#          requires:
#            - run_VT
#      - run_CTT:
#          requires:
#            - run_DPT
      - fetch_blueprint_from_TL
        #      - fetch_blueprint_from_TL:
        #          requires:
        #            - run_CTT
      - opera_deploy:
          requires:
            - fetch_blueprint_from_TL
      - cleanup:
          requires:
            - opera_deploy
